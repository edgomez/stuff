#!/usr/bin/env python
# -*- Encoding: utf-8 -*-

import optparse
import sys
import os
import subprocess

parser = optparse.OptionParser()
parser.add_option('-k', '--keep', dest='keep',
                  action='store_true', help='Keep intermediary files', default=False)
parser.add_option('-s', '--stack', dest='stack',
                  type='int', help='Bracketed stack depth', default=3)
parser.add_option('-a', '--no-align', dest='align',
                  action='store_false', help='Do not align before fuse', default=True)
parser.add_option('-f', '--fuse-opts', dest='enfuse_opts',
                  help='additional enfuse params (unchecked)')
parser.add_option('-r', '--real', dest='real', default=False,
                  action="store_true", help='use reals for fuse')

(options, args) = parser.parse_args()

files = sorted(args)
if len(files) % options.stack:
    sys.stderr.write("error: file list length is not a multiple of the stack depth")
    sys.exit(1)

fused_pattern = 'fused_%04d.tif'

numstack = len(files)/options.stack
for s in xrange(numstack):
    # fetch stack elements from the file list
    stack = files[options.stack*s:options.stack*(s+1)]

    if options.align:
        #Â align the images
        align_pfx = 'aligned_%04d_' % s
        cmd = [ 'align_image_stack', '-a', align_pfx ]
        cmd.extend(stack)
    
        sys.stdout.write("info: aligning stack %d/%d\n" % (s+1, numstack))
        align_image_stack = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (stdout, stderr) = align_image_stack.communicate()
        if align_image_stack.returncode:
            sys.stderr.write('error: align_image_stack returned %d value' % align_image_stack.returncode)
            sys.stderr.write('error: here is the output\n%s' % '\n'.join(stdout, stderr))
            sys.exit(1)

        aligned_stack = ['%s%04d.tif' % (align_pfx, i)  for i in xrange(options.stack)]
    else:
        aligned_stack = stack
        options.keep = True

    # fuse the aligned images
    fused_fn = fused_pattern % s
    cmd = [ 'enfuse', '--gpu', '--gray-projector=l-star', '-o', fused_fn]
    if options.real:
        cmd.extend(['-d', 'r32'])
    else:
        cmd.extend(['-d', '16'])
    if options.enfuse_opts and len(options.enfuse_opts):
        import shlex
        enfuse_opts = shlex.split(options.enfuse_opts)
        cmd.extend(enfuse_opts)
    cmd.extend(aligned_stack)

    sys.stdout.write("info: fusing stack %d/%d\n" % (s+1, numstack))
    enfuse = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = enfuse.communicate()
    if enfuse.returncode:
        sys.stderr.write('error: enfuse returned %d value' % enfuse.returncode)
        sys.stderr.write('error: here is the output\n%s' % '\n'.join(stdout, stderr))
        sys.exit(1)

    # copy required EXIF data for later hugin work
    cmd = [ 'exiftool', '-overwrite_original', '-tagsFromFile', stack[0], '-Make', '-Model', '-FocalLength', '-FocalLengthIn35mmFormat', '-Iso', fused_fn ]
    sys.stdout.write("info: copying EXIF data %d/%d\n" % (s+1, numstack))
    exiftool = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = exiftool.communicate()
    if exiftool.returncode:
        sys.stderr.write('error: exiftool returned %d value' % enfuse.returncode)
        sys.stderr.write('error: here is the output\n%s' % '\n'.join(stdout, stderr))
        sys.exit(1)
    
    if options.keep == False:
        for f in aligned_stack:
            os.unlink(f)

cmd = [ 'hugin' ]
cmd.extend([fused_pattern % i for i in xrange(numstack)])
print ' '.join(cmd)
