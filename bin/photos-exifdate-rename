#!/usr/bin/env python3

import os
import sys
import exiv2
import logging
import logging.handlers
import argparse
import functools
from datetime import datetime

supported_formats = ['raf', 'arw', 'rw2', 'dng', 'jpg', 'jpeg', 'nef', 'cr2', 'cr3', 'iiq', 'tif', 'orf' ]

def get_args_parser(args):
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", "--dry-run", dest="dryrun", action="store_true",
                  help="do no actual renaming", default=False)
    parser.add_argument("-v", "--verbose", dest="verbose", action="store_true",
                  help="enables verbose messages")
    parser.add_argument("-d", "--depth", dest="depth",
                  action="store", type=int, default=1, metavar="INT",
                  help="sets the maximum directory recursion level")
    parser.add_argument(dest="args", metavar="DIR|FILENAME", nargs='+')
    return parser


def get_logger(options):
    msg = logging.getLogger('Logger')
    msgch = logging.StreamHandler()
    level = logging.INFO
    if options.verbose:
        level = logging.DEBUG
    msg.setLevel(level)
    msgch.setLevel(level)
    msgch.setFormatter(logging.Formatter("%(message)s"))
    msg.addHandler(msgch)

    return msg

def get_candidate(date, i, ext):
    return u"%s_%02d.%s" % (date, i, ext)

def rename_photo(logger, fn, dryrun = False):
    # read the exif info from the file
    logger.debug("handling possible rename of %s" % fn)
    img = exiv2.ImageFactory.open(fn)
    img.readMetadata()
    info = img.exifData()

    # retrieve an exif date
    if "Exif.Photo.DateTimeOriginal" in info:
        exifdate = info["Exif.Photo.DateTimeOriginal"]._print()
    elif "Exif.Image.DateTime" in info:
        exifdate = info["Exif.Image.DateTime"]._print()
    else:
        logger.debug("no exif for file '%s'" % fn)
        logger.debug("%s" % info)
        return

    # prepare all elements for renaming iterations
    folder = os.path.dirname(fn)
    date = datetime.strptime(exifdate, "%Y:%m:%d %H:%M:%S").strftime("%Y-%m-%d_%H%M%S")
    i = 1
    ext = fn.split('.')[-1].lower()
    newname = get_candidate(date, i, ext)

    # avoid renaming if the file we're dealing with already matches the
    # desired new name
    if date == os.path.basename(fn)[:len(date)]:
        logger.debug("untouched '%s'" % fn)
        return

    # Create a complete path
    newfile = os.path.join(folder, newname)
    while os.path.isfile(newfile):
        # The file exists, try the next increment
        i = i + 1
        newname = get_candidate(date, i, ext)
        newfile = os.path.join(folder, newname)

    # Companion file for DT
    companion = ''.join([fn, '.xmp'])
    if os.path.isfile(companion):
        newcompanion = ''.join([newfile, '.xmp'])
        if not dryrun:
            os.rename(companion, newcompanion) 
        logger.info("renamed companion '%s' to '%s'" % (companion, newcompanion))

    # A free filename has been found
    if not dryrun:
        os.rename(fn, newfile)
    logger.info("renamed '%s' to '%s'" % (fn, newfile))

def cmp_filename(a, b):
    # first we look if a or b are a substring of the other, this prevents
    # having shorter filenames being considered greater than long ones
    (ba, xa) = os.path.splitext(a)
    (bb, xb) = os.path.splitext(b)
    if ba.find(bb) == 0:
        return 1
    elif bb.find(ba) == 0:
        return -1

    # Compare w/o looking at the letter cases
    if a.upper() < b.upper():
        return -1
    elif a.upper() > b.upper():
        return 1
    # Consider letter cases from now on
    elif a < b:
        return 1
    elif a > b:
        return -1
    else:
        return 0

def visit_directory(folder, logger, maxdepth=5, depth=1, dryrun=False):
    try:
        for entry in sorted(os.listdir(folder), key=functools.cmp_to_key(cmp_filename)):
            absentry = os.path.join(folder, entry)
            if os.path.isdir(absentry) and os.access(absentry, os.X_OK) and depth < maxdepth:
                visit_directory(absentry, logger, maxdepth, depth + 1)
            elif os.path.splitext(absentry)[1][1:].lower() in supported_formats:
                rename_photo(logger, absentry, dryrun)
    except:
        import traceback
        logger.error("something prevented renaming elements in %s\n\nError:\n%s\n%s\n%s\n" %
           (folder,
            str(sys.exc_info()[0]), str(sys.exc_info()[1]), "\n".join(traceback.format_tb(sys.exc_info()[2]))))

def main(args):
    parser = get_args_parser(args)
    options = parser.parse_args(args)
    logger = get_logger(options)
    exiv2.enableBMFF()
    exiv2.LogMsg.setLevel(logging.DEBUG)
    for arg in [r for r in options.args if os.path.isdir(r)]:
        visit_directory(arg, logger, options.depth, 1, options.dryrun)
    for arg in [r for r in options.args if os.path.isfile(r)]:
        rename_photo(arg, logger, options.dryrun)

if __name__ == '__main__':
    main(sys.argv[1:])
