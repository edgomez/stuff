#!/bin/sh

opt_action_default="compile"
opt_action="$opt_action_default"
opt_additional=""
opt_pgo="none"

g_progname="$(basename "$0")"

print_help()
{
    cat << __EOF__
usage: $g_progname [OPTIONS] [positional args]

OPTIONS
-a, --action  <STRING>   Action to complete
                         compile, pull, rebase
                         (default: $opt_action_default)
    --pgo-generate       Add necessary compile flags to generate profile guided
                         optimization instrumentation files
    --pgo-use            Add necessary compile flags to use the profile guided
                         optimization flags

-h, --help               Print this help message

Positional args will be forwarded to the action handler as
additional arguments
__EOF__
}

parse_args()
{
    while [ $# -gt 0 ] ; do
    case "$1" in
    -a|--action) opt_action="$2"; shift; ;;
    -h|--help) print_help; exit 0; ;;
    --pgo-generate) opt_pgo="generate"; ;;
    --pgo-use) opt_pgo="use"; ;;
    *) opt_additional="$opt_additional $1"; ;;
    esac
    shift
    done
}

list_branches_in_tobemerged()
{
    cat .tobemerged | grep -E -v '^#'
}

dt_compile()
{
    if [ ! -f ./build.sh ] ; then
        printf "error: not in DT root\n"
        return 1
    fi

    if [ -z "$DT_HOME" ] ; then
        printf "error: DT_HOME variable not defined\n"
        return 1
    fi

    local BUILD_TYPE="Release"
    local BUILD_DIR="./build/$(uname -s).$(uname -m).$BUILD_TYPE"
    local OPTIONS
    OPTIONS="$OPTIONS --prefix $DT_HOME"
    OPTIONS="$OPTIONS --build-type $BUILD_TYPE"
    OPTIONS="$OPTIONS --build-dir $BUILD_DIR"
    OPTIONS="$OPTIONS --build-generator Ninja"
    OPTIONS="$OPTIONS --enable-nls"
    OPTIONS="$OPTIONS --enable-libsecret"
    OPTIONS="$OPTIONS --disable-kwallet"
    OPTIONS="$OPTIONS --disable-unity"
    OPTIONS="$OPTIONS --enable-lua"
    OPTIONS="$OPTIONS --enable-camera"
    OPTIONS="$OPTIONS --enable-map"
    CCACHE="$(command -v ccache)"
    if [ -n "$CCACHE" -a -x "$CCACHE" ] ; then
        OPTIONS="$OPTIONS -- -DCMAKE_C_COMPILER_LAUNCHER=$CCACHE -DCMAKE_CXX_COMPILER_LAUNCHER=$CCACHE"
    fi
    if [ $# -gt 0 ] ; then
        OPTIONS="$OPTIONS $@"
    fi

    rm -rf "$DT_HOME.old"
    mv -f "$DT_HOME" "$DT_HOME.old" 2>/dev/null \

    case "$opt_pgo" in
    generate)
        mkdir -p "${BUILD_DIR}.pgo"
        pgo_dir="$(cd "${BUILD_DIR}.pgo" && pwd -P)"
        pgo_flags="-fprofile-dir=$pgo_dir -fprofile-generate=$pgo_dir"
        ;;
    use)
        mkdir -p "${BUILD_DIR}.pgo"
        pgo_dir="$(cd "${BUILD_DIR}.pgo" && pwd -P)"
        pgo_flags="-fprofile-dir=$pgo_dir -fprofile-use=$pgo_dir -fprofile-correction -Wno-maybe-uninitialized -Wno-missing-profile -Wno-coverage-mismatch"; ;;
    none) ;;
    esac

    if [ -n "$pgo_flags" ] ; then
        CFLAGS="$pgo_flags"
        CXXFLAGS="$pgo_flags"
        export CFLAGS CXXFLAGS
    fi
       
    rm -rf "$BUILD_DIR" \
      && ./build.sh --install $OPTIONS \
      && sed \
        -e s,'^Exec=.*',"Exec=$DT_HOME/bin/darktable %U", \
        -e s,'TryExec=.*',"TryExec=$DT_HOME/bin/darktable", \
        -e s,'Icon=.*',"Icon=$DT_HOME/share/icons/hicolor/scalable/apps/darktable.svg", \
        "$DT_HOME/share/applications/org.darktable.darktable.desktop" \
        > "$HOME/.local/share/applications/org.darktable.darktable.desktop" \
      || mv -f "$DT_HOME.old" "$DT_HOME" 2>/dev/null


    return 0
}

# clean/pull, merges branches listed in ./.tobemerged
dt_pull()
{
    if [ ! -f ./build.sh ] ; then
        printf "error: not in DT root\n"
        return 1
    fi

    git merge --abort
    git checkout -B master origin/master
    git reset --hard
    git pull
    git submodule update --init $(git submodule status | grep -v tests/integration | awk '{printf(" %s", $2); }')
    git checkout -B localbuild
    if [ -f .tobemerged ] ; then
        git merge --no-ff -m "merged all local branches" $(list_branches_in_tobemerged)
    fi
}

# rebase all branches listed in ./.tobemerged on top of master
dt_rebase()
{
    if [ ! -f ./build.sh ] ; then
        echo "error: not in DT root"
        return 1
    fi

    git checkout -B master origin/master
    git reset --hard
    for b in $(list_branches_in_tobemerged) ; do
        local branch="${b#*/}"
        local remote="${b%/${branch}}"
        git checkout -B $branch $b
        git rebase origin/master
        git push -f $remote $branch
    done
    git checkout master
}

main()
{
    parse_args "$@"
    case "$opt_action" in
    compile) dt_compile $opt_additional ;;
    pull) dt_pull;;
    rebase) dt_rebase;;
    *) printf 'error: unknown action %s\n' "$opt_action"
    esac
}

main "$@"
