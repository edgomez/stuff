#!/bin/sh

sd="$(dirname "$0")"
sd="$(cd "$sd" && pwd -P)"
g_progname="$(basename "$0")"

opt_versions=""
opt_versions_default="5.14"
opt_target=""
opt_target_default="bindeb-pkg"
opt_update=1

print_help()
{
    cat << __EOF__
usage: $g_progname [OPTIONS] [KERNEL SRC DIR] ...

OPTIONS:
-u|--update      Pull/update the kernel before build
-nu|--no-update  Do not pull/update the kernel before build
-t, --target     Kernel target to build

-h, --help       Print this help message
__EOF__
}

parse_args()
{
    while [ $# -gt 0 ] ; do
        case "$1" in
        -u|--update) opt_update=1; ;;
        -nu|--no-update) opt_update=0; ;;
        -t|--target) opt_target="$2"; shift; ;;
        -h|--help) print_help; exit 0; ;;
        *) opt_versions="$opt_versions $1"; ;;
        esac
        shift
    done
    if [ -z "$opt_versions" ] ; then
        opt_versions="$opt_versions_default"
    fi
    if [ -z "$opt_target" ] ; then
        opt_target="$opt_target_default"
    fi
}

# Returns the numbr of CPUs on Linux i386/x86_64
numcpu()
{
    grep ^processor /proc/cpuinfo | wc -l
}

linux_check_tree_root()
{
    if [ ! -f Makefile -o ! -f Kbuild -o ! -f ./scripts/setlocalversion ] ; then
        printf "error: not in a kernel source root dir\n"
        return 1
    fi
    return 0
}

# clean/pull in a Linux rootdir
linux_pull()
{
    if [ ! linux_check_tree_root ] ; then
        exit 1
    fi
    if [ ! -z "$(git status --untracked-files=no --porcelain)" ]; then
        git reset --hard
    fi
    git pull
}

# Compiles a linux kernel for debian
#   - cpu+2 concurrent jobs
#   - uses schedtool to batch the process if possible
linux_make()
{
    local target="${1:-bindeb-pkg}"
    if [ ! linux_check_tree_root ] ; then
        exit 1
    fi

    local schedtoolpath="$(command -v schedtool)"
    local SCHEDTOOL=""
    if [ -n "$schedtoolpath" -a -x "$schedtoolpath" ] ; then
        SCHEDTOOL="schedtool -D -e"
    fi
    $SCHEDTOOL \
        make \
        -j "$(($(numcpu) + 2))" \
        "$target"
}

debian_files_cleanup()
{
    rm -f  ../linux-*.buildinfo ../linux-*.changes
}

update_and_compile_kernel()
{
    local location="$1"
    local oldpwd="$(pwd)"

    cd "$location"
    if [ $opt_update -ne 0 ] ; then
        linux_pull
    fi
    linux_make $opt_target
    debian_files_cleanup
    cd "$oldpwd"
}

main()
{
    parse_args "$@"
    local i

    for i in $opt_versions; do
        if [ ! -d "$i" ] ; then
            continue
        fi
        update_and_compile_kernel "$i"
    done
}

main "$@"
