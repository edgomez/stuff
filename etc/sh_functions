# collection of functions that i sue daily on my desktop
# i usally echo ". opt/perso/bin/sh_functions" >> ~/.bashrc
# on my machines

# Prints ${$1}
# @1 variable name for which to get its value
varpt()
{
    local v="\$$1"
    eval "printf '%s' $v"
}

# Add an element to the tail of a variable
# @1 Variable name
# @2 new element
# @3 separator
add_tail()
{
    local old="$(printf "%s" "$(varpt "$1")")"
    local new="$(printf "%s" "$old" | sed -e "s,$2[$3]*,," -e "s,^$3,," -e "s,$3\$,,")"
    if [ -n "$new" ] ; then
        new="$new$3"
    fi
    eval "$1=\"$new$2\""
}

# Add an element to the head of a variable
# @1 Variable name
# @2 new element
# @3 separator
add_head()
{
    local old="$(printf "%s" "$(varpt "$1")")"
    local new="$(printf "%s" "$old" | sed -e "s,$2[$3]*,," -e "s,^$3,," -e "s,$3\$,,")"
    if [ -n "$new" ] ; then
        new="$3$new"
    fi
    eval "$1=\"$2$new\""
}

# Sets up my personal environment
#
# I like to compile beelding edge stuff and install it in my user
# account so i don't pollute the system. Hence this very lenghty
# function that takes care to let gcc/g++/man/pkg-config/ld still
# find those softwares when needed
env_personal()
{
    PANO_HOME="${HOME}/opt/hugin"
    VIDEO_HOME="${HOME}/opt/video"
    PERSO_HOME="${HOME}/opt/perso"
    DT_HOME="${HOME}/opt/darktable"

    #------------------------------------------------------------
    #    PATH
    #------------------------------------------------------------

    add_tail "PATH" "${PERSO_HOME}/bin" ":"
    add_head "PATH" "${PANO_HOME}/bin" ":"
    add_head "PATH" "${VIDEO_HOME}/bin" ":"
    add_tail "PATH" "${DT_HOME}/bin" ":"

    #------------------------------------------------------------
    # MANPATH
    #------------------------------------------------------------

    add_tail "MANPATH" "${PANO_HOME}/share/man" ":"
    add_tail "MANPATH" "${VIDEO_HOME}/share/man" ":"
    MANPATH=":$MANPATH"

    #------------------------------------------------------------
    # LD_LIBRARY_PATH
    #------------------------------------------------------------

    add_head "LD_LIBRARY_PATH" "${PANO_HOME}/lib" ":"
    add_head "LIBRARY_PATH" "${PANO_HOME}/lib" ":"
    add_head "LD_LIBRARY_PATH" "${VIDEO_HOME}/lib" ":"
    add_head "LIBRARY_PATH" "${VIDEO_HOME}/lib" ":"

    #------------------------------------------------------------
    # Include dirs for C language 
    #------------------------------------------------------------

    add_head "CPATH" "${PANO_HOME}/include" ":"
    add_head "CPATH" "${VIDEO_HOME}/include" ":"

    #------------------------------------------------------------
    # Python path
    #------------------------------------------------------------

    #add_tail "PYTHONPATH" "${MERCURIAL_HOME}/lib/python" ":"

    #------------------------------------------------------------
    # Pkg config path
    #------------------------------------------------------------

    add_tail "PKG_CONFIG_PATH" "${PANO_HOME}/lib/pkgconfig" ":"
    add_tail "PKG_CONFIG_PATH" "${VIDEO_HOME}/lib/pkgconfig" ":"

    #------------------------------------------------------------
    # Shell prompt
    #------------------------------------------------------------

    PS1='\[\e[01;34m\][\u@\h${debian_chroot:+($debian_chroot)}:\W]\$\[\e[0m\] '
    alias darktablet="darktable --library :memory:"

    #------------------------------------------------------------
    # Finalization
    #------------------------------------------------------------

    export PATH
    export MANPATH
    export LD_LIBRARY_PATH
    export LIBRARY_PATH
    export PKG_CONFIG_PATH
    export CPATH
    export PYTHONPATH
}

# Returns the numbr of CPUs on Linux i386/x86_64
numcpu()
{
    grep ^processor /proc/cpuinfo | wc -l
}

# Compiles a linux kernel using make-kpkg
# I hate make-kpkg using the three revision numbers, so x.y.(z+1) is not an
# update of x.y.z. So i change the patch number to zero and use the Debian
# revision x.y.z-@{--revision}.
# It also forces:
#   - 3/2*cpu concurrent jobs
#   - unsigned package and so on
#   - fakeroot rootcmd
# @arg --revision number (unchecked) Debian revision of the packag
linux_compile()
{
    # Make sure we don't generate dirty packages
    if [ ! -f Makefile -o ! -f Kbuild -o ! -f ./scripts/setlocalversion ] ; then
        printf "error: not in a kernel source root dir\n"
        return 1
    fi
    echo -e '#!/bin/sh\nexit 0\n' > ./scripts/setlocalversion

    git checkout -- Makefile

    local fullver=$(awk '
/^VERSION =/      { major=$3;}
/^PATCHLEVEL =/   { minor=$3;}
/^SUBLEVEL =/     { patchv=$3;}
END{printf("%s.%s.%s", major, minor, patchv);}
' Makefile)

    local _args=""
    local _rev="$fullver-1"
    while [ $# -gt 0 ]; do
        case "$1" in
        --revision)
            shift
            _rev="$fullver-$1"
            ;;
        *)
            _args="$_args $1"
            ;;
        esac
        shift
    done

    # remove the anoying extra version
    awk '
BEGIN{ver=2;}
/^VERSION =/      { ver=$3;}
/^SUBLEVEL =/     { if (ver >= 3) { printf("SUBLEVEL = 0\n"); next;}}
/^EXTRAVERSION =/ { printf("EXTRAVERSION =\n"); next;}
                  {print}
' Makefile > Makefile.tmp
    mv Makefile.tmp Makefile

    CONCURRENCY_LEVEL=$(( $(numcpu) * 3 / 2)) \
    schedtool -D -e make-kpkg \
        --us --uc \
        --initrd \
        --rootcmd fakeroot \
        --revision $_rev \
        $_args
}

# clean/pull in a Linux rootdir
linux_pull()
{
    if [ ! -f Makefile -o ! -f Kbuild ] ; then
        printf "error: not in a kernel source root dir\n"
        return 1
    fi
    linux_compile clean
    git reset --hard
    git pull
}

# compiles a darktable source tree and its curve tooling
# @args appended to my default options list
dt_compile()
{
    if [ ! -f ./build.sh ] ; then
        printf "error: not in DT root\n"
        return 1
    fi

    if [ -z "$DT_HOME" ] ; then
        printf "error: DT_HOME variable not defined\n"
        return 1
    fi

    local BUILD_TYPE="RelWithDebInfo"
    local BUILD_DIR="./build/$(uname -s).$(uname -m).$BUILD_TYPE"
    local OPTIONS="--prefix $DT_HOME --build-type $BUILD_TYPE --build-dir $BUILD_DIR --disable-libsecret --disable-kwallet --disable-flickr --disable-unity --enable-lua"
    if [ $# -gt 0 ] ; then
        OPTIONS="$OPTIONS $@"
    fi

    rm -rf "$DT_HOME.old"
    mv -f "$DT_HOME" "$DT_HOME.old" 2>/dev/null \
 
    rm -rf "$BUILD_DIR" \
      && ./build.sh --install $OPTIONS \
      && sed \
        -e s,'^Exec=.*',"Exec=$DT_HOME/bin/darktable %U", \
        -e s,'TryExec=.*',"TryExec=$DT_HOME/bin/darktable", \
        "$DT_HOME/share/applications/darktable.desktop" \
        > "$HOME/.local/share/applications/darktable.desktop" \
      || mv -f "$DT_HOME.old" "$DT_HOME" 2>/dev/null

    cd tools/basecurve \
      && rm -rf build \
      && mkdir build \
      && cd build \
      && cmake -DCMAKE_INSTALL_PREFIX=$DT_HOME -DCMAKE_BUILD_TYPE=$BUILD_TYPE .. \
      && cmake --build . --target install -- -j4 \
      && cd ../../.. 

    return 0
}

# clean/pull, merges branches listed in ./tobemerged
dt_pull()
{
    if [ ! -f ./build.sh ] ; then
        printf "error: not in DT root\n"
        return 1
    fi

    git merge --abort
    git checkout master
    git reset --hard
    git pull
    if [ -f tobemerged ] ; then
        git merge --no-commit $(cat tobemerged)
    fi
}

# rebase all branches listed in ./tobemerged on top of master
dt_rebase()
{
    if [ ! -f ./build.sh ] ; then
        echo "error: not in DT root"
        return 1
    fi

    git checkout master
    git reset --hard
    for b in $(cat tobemerged) ; do
        git checkout -B $(basename $b) $b
        git rebase origin/master
        git push -f edgomez
    done
    git checkout master
}

# enable/disable nouveau in a nasty way
# @1 on/enable/off/disable
# @2 kernel revision (optional, uses current running revision)
nouveau_setup()
{
    if [ $# -eq 1 ] ; then
        revision="$(uname -r)"
    else
        revision="$2"
    fi

    local nvdir="/lib/modules/$revision/kernel/drivers/gpu/drm/nouveau"
    local nvenabled="$nvdir/nouveau.ko"
    local nvdisabled="$nvdir/nouveau.ko.disabled"

    case "$1" in
    on|enable)
        moved="$nvenabled"
        checked="$nvdisabled"
        ;;
    off|disable)
        checked="$nvenabled"
        moved="$nvdisabled"
        ;;
    *)
        printf '%s <enable|disable|on|off> [kernel revision]\n' "$0"
        return 1
    esac

    if [ -f "$checked" ] ; then
        sudo mv "$checked" "$moved"
    fi

    return 0
}

env_personal
